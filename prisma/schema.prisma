// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  ORG_ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  role          UserRole  @default(USER)

  organizationsOwned  Organization[]
  organizationsLinked OrganizationsUsers[]

  currentOrgId String?
  currentOrg   Organization? @relation(name: "Current working organization", fields: [currentOrgId], references: [id])

  inventories InventoryRoundUser[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Organization {
  id   String @id @default(cuid())
  name String

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])

  users        OrganizationsUsers[]
  usersWorking User[]               @relation("Current working organization")
  products     Product[]
  policies     Policy[]
}

model OrganizationsUsers {
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@id([organizationId, userId])
}

enum Severity {
  LOW
  MEDIUM
  HIGH
}

model Product {
  id           String  @id @default(cuid())
  name         String
  imageUrl     String?
  currentStock Int     @default(0)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  batchTracking Boolean
  policyId      String
  policy        Policy  @relation(fields: [policyId], references: [id])

  inventories     InventoryProduct[]
  inventoryRounds InventoryRoundProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Policy {
  id   String   @id @default(cuid())
  name Severity

  threshold Float
  frequency Int

  product        Product[]
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, organizationId])
}

model Inventory {
  id       String  @id @default(cuid())
  finished Boolean @default(false)

  products InventoryProduct[]

  round InventoryRound[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Round {
  ORIGINAL
  REVIEW
}

model InventoryRound {
  id   String @id @default(cuid())
  name Round

  users    InventoryRoundUser[]
  products InventoryRoundProduct[]

  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InventoryRoundUser {
  inventoryRoundId String
  inventoryRound   InventoryRound @relation(fields: [inventoryRoundId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([inventoryRoundId, userId])
}

model InventoryRoundProduct {
  inventoryRoundId String
  inventoryRound   InventoryRound @relation(fields: [inventoryRoundId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@unique([inventoryRoundId, productId])
}

model InventoryProduct {
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])

  initalStock     Int
  reconciledStock Int

  @@unique([inventoryId, productId])
}
